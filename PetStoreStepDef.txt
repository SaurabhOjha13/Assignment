package com.microservices.petstore.stepdef;

import org.springframework.beans.factory.annotations.Autowired;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;

import static org.assertj.core.api.Assertion.assertThat;
import com.microservices.petstore.api.pet.FindPetsByStatusApi;
import com.microservices.petstore.api.pet.FindPetsByStatusResponse;
import com.microservices.petstore.api.pet.AddPetApi;
import com.microservices.petstore.api.pet.AddPetResponse;
import com.microservices.petstore.api.pet.UpdatePetApi;
import com.microservices.petstore.api.pet.UpdatePetResponse;
import com.microservices.petstore.api.pet.DeletePetApi;
import com.microservices.petstore.api.pet.DeletePetResponse;

public class FindPetsByStatusStepDef {

@Autowired
private FindPetsByStatusApi findPetsByStatusApi;
private FindPetsByStatusResponse findPetsByStatusResponse;
private AddPetResponse addPetResponse;
private AddPetApi addPetApi;
private AddPet addPet;
private UpdatePet updatePet;
private DeletePetResponse deletePetResponse;
private DeletePetApi deletePetApi;
private List<status> request = new HashMap<>();

 @Given("^Pets Microservices is called with status '(.*)'$")
 public void getStatus(String status) throws Throwable{
	List<status> fieldList = toStatusList(dataTable);
	findPetsByStatusResponse = FindPetsByStatusApi.findByStatus(fieldList);

}


 @Then("^Pets microservice is returning the value as (.+)$")
 public void assertValues(String expected) throws Throwable{
	List<status> expectedValue =toStatusList(dataTable);
	List<status> expectedFieldSet = expected.stream().filter(it -> it.getValue()! = null).collect(toList());
	List<status> actualFieldSet = findPetsByStatusResponse.getFields().get(expected);
	assertThat(actualFieldSet).containsAll(expectedFieldSet);

}

@Given("^Pets Microservices accepts the json '(.*)'$")
 public void getStatus(String updatedJson) throws Throwable{
	String newJson= BddTestFileReader.fileToString(updatedJson);
	addPetResponse = addPetApi.getAddPet(newJson);

}

@Then("^Add Pet Api response contains following values$")
 public void containsFollowingValues(DataTable table) throws Throwable {
	checkSingleObjectResult(table, this.addPet);
}



@Then("^Update Pet Api response contains following values$")
 public void containsFollowingValues(DataTable table) throws Throwable {
	checkSingleObjectResult(table, this.updatePet);
}


public static void checkSingleObjectResult(DataTable table, Object targetObject) {
 Assertion.assertThat(targetObject).isNotNull();
 Map<String, String> expectedValues = table.asMap(String.class, String.class);
 expectedValues.entrySet().forEach(a) -> {
	Object expectedValue = a.getValue();
	String fieldName =(String)a.getKey();
	assertField(targetObject, expectedValue, fieldName);
});

}


@Given("^Delete the Pet with '(.*)'$")
 public void getPetId(String petId) {
	try{
		deletePetResponse = deletePetApi.petId(petId);
	   }
	catch(Exception ex) {
	     this.ex=ex;
 	   }
	}

	
@Then("^the HTTP response code should be '(.*)'$")
 public void compareResults(String responseCode) throw Throwable {
	assertThat(ex.getMessage().trim()).contains(responseCode.trim());
}

}